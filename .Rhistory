q()
q()
q()
qnorm(3/sqrt(2))
qnorm(3/1,4)
qnorm(3/1.4)
qnorm(2.63)
qnorm(2,63)
qnorm(0.67)
qnorm(2.63)
qnorm(1.65)
x<- c(2, 5, 6, 7, 10)
y<- c(2, 5, 6, 7, 10)
x<- c(3, 4, 5, 8, 10)
x
y
sd(x)
variance <- function (x)   sum((x-mean(x))^2)/(length(x)-1)
variance(y)
r<- c(10, 10, 10, 10, 10)
sd(r)
variance(r)
ppois(8,7)
ppois(8,8)
ppois(8,9)
dpois(8,7)
dpois(8,8)
dpois(8,9)
pnorm(60,75,12)
q()
MASS
crabs
library(mass)
library(MASS)
crabs
c <- crabs(cl)
c <- crabs(CL)
c = crabs(CL)
crabs(CL)
crabs
datos<-crabs
largos<-datos$CL
largos
x<-mean(largos)
x
var(largos)
sd(largos)
variance <- function (x)   sum((x-mean(x))^2)/(length(x)-1)
variance(largos)
qnorm(0.96)
ancho<-datos$CW
ancho
ancho20<-ancho(1.50)
ancho20<-ancho(1;50)
ancho20<-ancho(1:50)
ancho20<-ancho(1:50)
ancho<-datos$CW(1:50)
ancho2<-datos$CW(1:50)
ancho20<-ancho[1:50]
ancho20
ancho20 <-ancho20+ancho[151:200]
ancho20
ancho20<-ancho[1:50,151:200]
ancho20<-ancho[1:50 151:200]
ancho20<-ancho[1:50]
ancho20<-ancho[c(1:50,151:200)]
ancho20
anchoFemenino <- ancho20
anchoMasculino<-ancho[51:150]
anchoMasculino
ancho20<-ancho[c(1:50,101:150)]
anchoMasculino <- ancho20
ancho20<-ancho[c(51:100,151:200)]
anchoFemenino <- ancho20
anchoMasculino
mean(anchoMasculino)
mean(anchoFemenino)
sd(anchoMasculino)
sd(anchoFemenino)
q()
setwd("D:/Universidad/AprendizajeAutonomo/Machine Learning")
dataset = read.csv('./data/data.csv')
dataset$Age = ifelse(is.na(dataset$Age), ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary), ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
dataset$Country = factor(dataset$Country,
levels=c("France", "Spain", "Germany"),
labels=c(1,2,3)
)
dataset$Purchased = factor(dataset$Purchased,
levels=c("Yes", "No"),
labels=c(1,0)
)
View(dataset)
install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
View(testing_set)
View(training_set)
#
training_set = scale(training_set)
#
training_set = scale(training_set)
#
training_set[,2:3] = scale(training_set[,2:3])
testing_set[,2:3] = scale(testing_set[,2:3])
View(dataset)
View(testing_set)
View(testing_set)
